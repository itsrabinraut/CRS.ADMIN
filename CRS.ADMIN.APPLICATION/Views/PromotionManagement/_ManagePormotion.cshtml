@model CRS.ADMIN.APPLICATION.Models.PromotionManagement.PromotionManagementModel
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<style>
    #cropModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    #imageToCrop {
        max-width: 50%;
        max-height: 80vh;
    }
</style>
<div id="add-new-host-location"
     class="drawer-close-disable  flex justify-end fixed top-0 right-0 z-40 h-screen overflow-y-auto transition-transform translate-x-full "
     tabindex="-1" aria-labelledby="drawer-right-label">
    <div class="bg-white w-[616px] drawer-container relative">
        <div class="drawer-form-container sticky top-0 z-[5] ">
            <div class="drawer-form flex justify-between bg-secondary-color-pink py-[16px] px-[24px] h-[56px]">
                <div>
                    @CRS.ADMIN.APPLICATION.Resources.Resource.Manage_Promotion
                </div>
                <button type="button" class="text-[20px]" id="CloseId">
                    <i class="las la-window-close text-white"></i>
                </button>
            </div>
        </div>
        @using (Html.BeginForm("ManagePromotionalImage", "PromotionManagement", FormMethod.Post, new { @id = "ManagePromotionalImageForm", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            if (!string.IsNullOrEmpty(Model.Id))
            {
                @Html.HiddenFor(model => model.Id)
            }
            if (!string.IsNullOrEmpty(Model.ImagePath))
            {
                @Html.HiddenFor(model => model.ImagePath)
            }
            <div class="p-[24px]">
                <div class="pb-[16px] grid gap-4">
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Image_Titile
                        </label>
                        @Html.TextBoxFor(model => model.Title, new { @class = "w-full rounded-[4px]", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Image_Titile, @style = "border-radius:4px !important", @onkeypress = "return isAlphabetWithSpace(event)", autocomplete = "off", @maxLength = "50" })
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.Title)
                        </span>
                    </div>
                    <div class="input-field-common">
                        <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Image_Description
                        </label>
                        @Html.TextAreaFor(model => model.Description, new { @class = "w-full", @placeholder = @CRS.ADMIN.APPLICATION.Resources.Resource.Image_Description, @onkeypress = "return isNumberWithDot(event)", autocomplete = "off", @maxLength = 200 })
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.Description)
                        </span>

                    </div>
                    <div>
                        <label for="gallery" class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Promotional_Image
                        </label>
                        <div class="file-upload-common bg-gray-gallery">
                            <label for="file_input_logo" class="custom-file-upload text-ellipsis-customer w-[128px] flex-none cursor-pointer">
                                <span>
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Choose_Images
                                </span>
                            </label>
                            <input id="file_input_logo" class="file-input" name="ImagePathFile" type="file" style="display:none;">
                            <p id="file_name_logo" class="file-name w-max h-[23px] overflow-hidden pl-2 text-xs text-[#686868] leading-[25px]">
                                @if (string.IsNullOrEmpty(Model.ImagePath))
                                {
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.No_File_Choosen
                                }
                                else
                                {
                                    string fileName = Path.GetFileName(Model.ImagePath);
                                    @fileName
                                }
                            </p>
                        </div>

                        <!-- Modal for cropping -->
                        <div id="cropModal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center">
                            <div class="bg-white p-4 rounded-lg max-w-lg w-full max-h-[80vh] overflow-auto">
                                <div class="mb-4">
                                    <img id="imageToCrop" src="" alt="Image to crop" class="max-w-full">
                                </div>
                                <div class="flex justify-end">
                                    <button id="cropImageButton" class="bg-blue-500 text-white px-4 py-2 rounded-md">Crop</button>
                                    <button id="cancelCropButton" class="ml-2 bg-gray-500 text-white px-4 py-2 rounded-md">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="text-xs text-error mt-[8px]">
                        @CRS.ADMIN.APPLICATION.Resources.Resource.Note:
                        @CRS.ADMIN.APPLICATION.Resources.Resource.Image_should_be_in_HEIF_format
                        @CRS.ADMIN.APPLICATION.Resources.Resource.and_Maximum_file_size_is_5_MB
                    </div>
                </div>
                <div class="flex justify-end py-4">
                    <div class="flex gap-6">
                        <button class="resetForm btn btn-gray-white h-[40px] rounded-[4px] px-8 text-sm" id="CancelId">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Cancel
                        </button>
                        <button class="resetForm btn btn-primary-default h-[40px] px-8 rounded-[4px]  text-sm leading-[10px]" id="saveData">
                            @CRS.ADMIN.APPLICATION.Resources.Resource.Submit
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        let cropper;
        const modal = document.getElementById('cropModal');
        const imageToCrop = document.getElementById('imageToCrop');
        const fileInput = document.getElementById('file_input_logo');
        const fileNameDisplay = document.getElementById('file_name_logo');

        fileInput.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imageToCrop.src = e.target.result;
                    modal.style.display = 'flex';

                    if (cropper) {
                        cropper.replace(e.target.result);
                    } else {
                        cropper = new Cropper(imageToCrop, {
                            aspectRatio: 298 / 181,
                            viewMode: 1,
                            background: false,
                        });
                    }

                    fileNameDisplay.textContent = file.name;
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('cropImageButton').addEventListener('click', function (event) {
            event.preventDefault();
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 298,
                    height: 181,
                    maxWidth: 298,
                    maxHeight: 181,
                });
                if (canvas) {
                    canvas.toBlob(function (blob) {
                        const formData = new FormData();
                        formData.append('croppedImage', blob);
                        console.log('Cropped image ready to upload', formData);

                        const reader = new FileReader();
                        reader.onload = function () {
                            const dataUrl = reader.result;
                            const dataTransfer = new DataTransfer();
                            const file = new File([blob], "croppedImage.jpg", { type: "image/jpeg" });
                            dataTransfer.items.add(file);
                            fileInput.files = dataTransfer.files;
                        };
                        reader.readAsDataURL(blob);

                        modal.style.display = 'none';
                        cropper.destroy();
                        cropper = null;
                    }, 'image/jpeg', 0.8);
                }
            }
        });

        document.getElementById('cancelCropButton').addEventListener('click', function () {
            modal.style.display = 'none';
            $('#file_name_logo').val('');
            $('#file_input_logo').val('');
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        });
    });
</script>
