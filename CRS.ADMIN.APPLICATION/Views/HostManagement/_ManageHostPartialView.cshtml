@model CRS.ADMIN.APPLICATION.Models.HostManagement.ManageHostModel
<div id="add-new-host"
     class="drawer-close-disable  flex justify-end fixed top-0 right-0 z-40 h-screen overflow-y-auto transition-transform translate-x-full"
     tabindex="-1" aria-labelledby="add-new-host-club" aria-modal="true" role="dialog">
    <div class="bg-white w-[616px] drawer-container relative">
        <div class="drawer-form-container sticky top-0 z-[5] ">
            <div class="drawer-form flex justify-between bg-secondary-color-pink py-[16px] px-[24px] h-[56px]">
                <div>
                    @CRS.ADMIN.APPLICATION.Resources.Resource.Manage_Host
                </div>
                <button type="button" data-drawer-hide="add-new-host-club" aria-controls="add-new-host-club"
                        class="text-[20px]">
                    <i class="las la-window-close text-white" onclick="CancelFunction()"></i>
                </button>
            </div>
        </div>
        <div class="p-[24px]">
            <div class=" py-4 grid gap-6">
                @using (Html.BeginForm("ManageHost", "HostManagement", FormMethod.Post, new { @id = "ManageHostForm", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.AgentId)
                    @Html.HiddenFor(model => model.HostLogo)
                    if (!string.IsNullOrEmpty(Model.HostId))
                    {
                        @Html.HiddenFor(model => model.HostId)
                    }
                    <div class="flex gap-2">
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard  active" id="step1">
                            <div class="steps-number ">
                                1
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Basic_Information
                            </div>
                            <hr class="setp-divider" />
                        </div>
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard " id="step2">
                            <div class="steps-number ">
                                2
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.SNS
                            </div>
                            <hr class="setp-divider" />
                        </div>
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard " id="step3">
                            <div class="steps-number ">
                                3
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.SkillSets
                            </div>
                            <hr class="setp-divider" />
                        </div>
                        <div class="flex items-center gap-2 profile-steps add-new-host-wizard " id="step4">
                            <div class="steps-number ">
                                4
                            </div>
                            <div class="steps-text">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Lifestyle
                            </div>
                            <hr class="setp-divider" />
                        </div>
                    </div>
                    <div id="content1" class="content-section" style="display: block;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Basic_Info
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name (@CRS.ADMIN.APPLICATION.Resources.Resource.English)
                                    </label>
                                    @Html.TextBoxFor(model => model.HostName, new
                                   {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name,
                                       //@onkeypress = "return isAlphabetWithSpace(event)",
                                       autocomplete = "off",
                                       @maxLength = "100"
                                   })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.HostName)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name (@CRS.ADMIN.APPLICATION.Resources.Resource.Japanese)
                                    </label>
                                    @Html.TextBoxFor(model => model.HostNameJapanese, new
                                   {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Host_Name,
                                       //@onkeypress = "return isAlphabetWithSpace(event)",
                                       autocomplete = "off",
                                       @maxLength = "100"
                                   })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.HostNameJapanese)
                                    </span>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Position
                                    </label>
                                    @Html.TextBoxFor(model => model.Position, new
                                    {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Position,
                                       //@onkeypress = "return isAlphabetWithSpace(event)",
                                       autocomplete = "off",
                                       @maxLength = "100"
                                    })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Position)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Rank
                                    </label>
                                    <select id="large" class="select-common block w-full " name="Rank">
                                        @foreach (var item in ViewBag.RankDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.RankDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Rank)
                                    </span>
                                </div>
                            </div>
                            <div>
                                <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.ProfileImage
                                </label>
                                <div class="file-upload-common">
                                    <label for="file_input_business_certificate" class="custom-file-upload w-[128px] flex-none text-ellipsis-customer ">
                                        <span>
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Choose_Images
                                        </span>
                                    </label>
                                    <input id="file_input_business_certificate" class="file-input" type="file" name="HostLogoFile" value="@Model.HostLogo"
                                           style="display:none;">
                                    <p id="file_name_bussiness_certificate"
                                       class="file-name w-max h-[23px] overflow-hidden pl-2 text-xs text-[#686868] leading-[25px]">
                                        @if (string.IsNullOrEmpty(Model.HostLogo))
                                        {
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.No_File_Choosen
                                        }
                                        else
                                        {
                                            string fileName = Path.GetFileName(Model.HostLogo);
                                            @fileName
                                        }
                                </div>
                                <div class="text-xs text-error mt-[8px]">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Note:
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Image_should_be_in_HEIF_format
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.and_Maximum_file_size_is_5_MB .
                                </div>
                            </div>
                            <div class="grid gap-[16px]">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Birth_Date
                                    </label>
                                    <div class="select-date-common flex gap-[16px]">
                                        @{
                                            DateTime date = (!string.IsNullOrEmpty(Model.DOB) && Model.DOB.Trim().ToUpper() != "YYYY-MM-DD") ? Convert.ToDateTime(Model.DOB) : DateTime.Now;
                                            int SplitYear = date.Year;
                                            int SplitMonth = date.Month;
                                            int SplitDay = date.Day;
                                        }
                                        <select id="large" class="select-common block w-[100px]" name="BirthYearKey">
                                            <option selected>YYYY</option>
                                            @{
                                                DateTime currentDate = DateTime.Now;
                                                int currentYear = currentDate.Year;
                                                List<int> last100Years = new List<int>();
                                                int startYear = currentYear - 200;
                                                for (int year = currentYear; year >= startYear; year--)
                                                {
                                                    last100Years.Add(year);
                                                }
                                                foreach (var item in last100Years)
                                                {
                                                    if ((!string.IsNullOrEmpty(Model.DOB) && Model.DOB.Trim().ToUpper() != "YYYY-MM-DD") && SplitYear == item)
                                                    {
                                                        <option value="@item" selected>@item</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@item">@item</option>
                                                    }
                                                }
                                            }
                                        </select>
                                        <select id="large" class="select-common block w-[100px] " name="BirthMonthKey">
                                            <option selected>MM</option>
                                            @for (int i = 1; i < 13; i++)
                                            {
                                                if ((!string.IsNullOrEmpty(Model.DOB) && Model.DOB.Trim().ToUpper() != "YYYY-MM-DD") && SplitMonth == i)
                                                {
                                                    <option value="@i" selected>@i</option>
                                                }
                                                else
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            }
                                        </select>
                                        <select id="large" class="select-common block w-[100px] " name="BirthDayKey">
                                            <option selected>DD</option>
                                            @for (int i = 1; i < 33; i++)
                                            {
                                                if ((!string.IsNullOrEmpty(Model.DOB) && Model.DOB.Trim().ToUpper() != "YYYY-MM-DD") && SplitDay == i)
                                                {
                                                    <option value="@i" selected>@i</option>
                                                }
                                                else
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            }
                                        </select>
                                    </div>

                                </div>
                                <div class="toogle-common">
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" value="" class="sr-only peer" checked>
                                        <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-secondary-color-pink">
                                        </div>
                                        <span class=" pl-2 text-sm font-medium text-secondary-100">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Hide
                                        </span>
                                    </label>
                                </div>
                                <div class="flex gap-[24px]">
                                    <div class="flex items-center checkbox-common py-[8px]">
                                        <input id="default-checkbox-year" type="checkbox" value=""
                                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                        <label for="default-checkbox-year" class="ml-2 text-sm font-medium text-secondary-100 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Year
                                        </label>
                                    </div>
                                    <div class="flex items-center checkbox-common py-[8px]">
                                        <input id="default-checkbox-month" type="checkbox" value=""
                                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                        <label for="default-checkbox-month" class="ml-2 text-sm font-medium text-secondary-100 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Month
                                        </label>
                                    </div>
                                    <div class="flex items-center checkbox-common py-[8px]">
                                        <input id="default-checkbox-date" type="checkbox" value=""
                                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                        <label for="default-checkbox-date" class="ml-2 text-sm font-medium text-secondary-100 ">
                                            @CRS.ADMIN.APPLICATION.Resources.Resource.Date
                                        </label>
                                    </div>
                                </div>
                                <div class="flex items-center justify-end checkbox-common py-[8px]">
                                    <input id="default-checkbox" type="checkbox" value=""
                                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300   ">
                                    <label for="default-checkbox" class="ml-2 text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Hide_Host_Info
                                    </label>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.BirthPlace
                                    </label>

                                    @Html.TextBoxFor(model => model.Address, new
                                    {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.BirthPlace,
                                       autocomplete = "off",
                                       maxLength = "50"
                                    })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Address)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Blood_Type
                                    </label>

                                    <select id="large" class="select-common block w-full " name="BloodGroupDDLKey">
                                        @foreach (var item in ViewBag.BloodGroupDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.BloodGroupDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Constellation_Group
                                    </label>

                                    <select id="large" class="select-common block w-full " name="ZodiacSignsDDLKey">
                                        @foreach (var item in ViewBag.ZodiacSignsDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.ZodiacSignsDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.ConstellationGroup)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Previous_Occupation
                                    </label>

                                    <select id="large" class="select-common block w-full " name="OccupationDDLKey">
                                        @foreach (var item in ViewBag.OccupationDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.OccupationDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Height
                                    </label>
                                    @Html.TextBoxFor(model => model.Height, new
                                    {
                                       @class = "w-full",
                                       @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Height,
                                       @onkeypress = "return isNumber(event)",
                                       autocomplete = "off",
                                       maxLength = "3"
                                    })
                                    <span class="error">
                                        @Html.ValidationMessageFor(m => m.Height)
                                    </span>
                                </div>
                                <div class="input-field-common">
                                    <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100">
                                        @CRS.ADMIN.APPLICATION.Resources.Resource.Liquor_Strength
                                    </label>

                                    <select id="large" class="select-common block w-full" name="LiquorStrengthDDLKey">
                                        @foreach (var item in ViewBag.LiquorStrengthDDL as IEnumerable<SelectListItem>)
                                        {
                                            var selectedId = ViewBag.LiquorStrengthDDLKey as string;
                                            if (item.Value == selectedId)
                                            {
                                                <option value="@item.Value" selected>
                                                    @item.Text
                                                </option>
                                            }
                                            else
                                            {
                                                <option value="@item.Value">
                                                    @item.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="input-field-common">
                                <label class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.HostIntroduction
                                </label>
                                @Html.TextAreaFor(model => model.HostIntroduction, new
                               {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.HostIntroduction,
                                   //@onkeypress = "return isNumber(event)",
                                   autocomplete = "off",
                                   @maxLength = "500"
                               })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.HostIntroduction)
                                </span>
                            </div>
                        </div>
                    </div>
                    <div id="content2" class="content-section" style="display: none;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.SNS
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Instagram
                                </label>
                                @Html.TextBoxFor(model => model.InstagramLink, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Instagram,
                                   //@onkeypress = "return isAlphabetWithSpace(event)",
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.InstagramLink)
                                </span>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Tiktok
                                </label>
                                @Html.TextBoxFor(model => model.TiktokLink, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Tiktok,
                                   //@onkeypress = "return isAlphabetWithSpace(event)",
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.TiktokLink)
                                </span>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Twitter
                                </label>
                                @Html.TextBoxFor(model => model.TwitterLink, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Twitter,
                                   //@onkeypress = "return isAlphabetWithSpace(event)",
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.TwitterLink)
                                </span>
                            </div>
                            <div class="input-field-common">
                                <label for="email" class="block mb-[12px] text-sm font-medium text-secondary-100 ">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Line
                                </label>
                                @Html.TextBoxFor(model => model.Line, new
                                {
                                   @class = "w-full",
                                   @placeholder = CRS.ADMIN.APPLICATION.Resources.Resource.Line,
                                   autocomplete = "off"
                                })
                                <span class="error">
                                    @Html.ValidationMessageFor(m => m.Line)
                                </span>
                            </div>
                        </div>
                    </div>
                    <div id="content3" class="content-section" style="display: none;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.HotSkills
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                @for (int i = 0; i < Model.HostIdentityDataModel.Count; i++)
                                {
                                    if (Model.HostIdentityDataModel[i].IdentityType == "31".EncryptParameter())
                                    {
                                        <div class="input-field-common">
                                            <label class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                                                @Model.HostIdentityDataModel[i].IdentityLabel
                                            </label>
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityType)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityValue)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityLabel)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityDDLType)

                                            <select id="identityDDL" class="select-common block w-full">
                                                @foreach (var item in ViewBag.SkillDDL as IEnumerable<SelectListItem>)
                                                {
                                                    var selectedId = Model.HostIdentityDataModel[i].IdentityDDLType;
                                                    if (item.Value == selectedId)
                                                    {
                                                        <option value="@item.Value" selected>
                                                            @item.Text
                                                        </option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@item.Value">
                                                            @item.Text
                                                        </option>
                                                    }
                                                }
                                            </select>

                                            @Html.TextBoxFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                            {
                                                @class = "w-full",
                                                @placeholder = @Model.HostIdentityDataModel[i].IdentityLabel,
                                                @onkeypress = "return isNumber(event)",
                                                autocomplete = "off",
                                                @maxLength = "3"
                                            })
                                            <span class="error">
                                                @Html.ValidationMessageFor(model => Model.HostIdentityDataModel[i].IdentityDescription)
                                            </span>
                                        </div>
                                    }
                                }
                                @*@foreach (var item in Model.HostIdentityDataModel.Where(x => x.IdentityType == "31").ToList())
                                    {
                                        <div class="input-field-common">
                                            <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                                @item.IdentityLabel
                                            </label>
                                            @Html.TextBoxFor(model => item.IdentityDescription, new
                                            {
                                                @class = "w-full",
                                                @placeholder = @item.IdentityLabel,
                                                @onkeypress = "return isNumber(event)",
                                                autocomplete = "off",
                                                @maxLength = "3"
                                            })
                                            <span class="error">
                                                @Html.ValidationMessageFor(m => item.IdentityDescription)
                                            </span>
                                        </div>
                                    }*@
                            </div>
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Personality
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-x-5 gap-y-4">
                                @for (int i = 0; i < Model.HostIdentityDataModel.Count; i++)
                                {
                                    if (Model.HostIdentityDataModel[i].IdentityType == "32".EncryptParameter())
                                    {
                                        <div class="input-field-common">
                                            <label class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                                                @Model.HostIdentityDataModel[i].IdentityLabel
                                            </label>
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityType)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityValue)
                                            @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityLabel)
                                            @Html.TextBoxFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                            {
                                                @class = "w-full",
                                                @placeholder = @Model.HostIdentityDataModel[i].IdentityLabel,
                                                //@onkeypress = "return isAlphabetWithSpace(event)",
                                                autocomplete = "off",
                                                @maxLength = "100"
                                            })
                                            <span class="error">
                                                @Html.ValidationMessageFor(model => Model.HostIdentityDataModel[i].IdentityDescription)
                                            </span>
                                        </div>
                                    }
                                }
                                @*@foreach (var item in Model.HostIdentityDataModel.Where(x => x.IdentityType == "32").ToList())
                                    {
                                        <div class="input-field-common">
                                            <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                                @item.IdentityLabel
                                            </label>
                                            @Html.TextBoxFor(model => item.IdentityDescription, new
                                            {
                                                @class = "w-full",
                                                @placeholder = @item.IdentityLabel,
                                                //@onkeypress = "return isAlphabetWithSpace(event)",
                                                autocomplete = "off",
                                                @maxLength = "100"
                                            })
                                            <span class="error">
                                                @Html.ValidationMessageFor(m => item.IdentityDescription)
                                            </span>
                                        </div>
                                    }*@
                            </div>
                        </div>
                    </div>
                    <div id="content4" class="content-section" style="display: none;">
                        <div class="grid gap-4 py-[10px]">
                            <div class="flex gap-2 text-primary-300 text-sm font-semibold items-center mt-[10px]">
                                <div class="flex-none">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Lifestyle
                                </div>
                                <div class="bg-[#F4F4F4] h-[1px] w-full">
                                </div>
                            </div>
                            @for (int i = 0; i < Model.HostIdentityDataModel.Count; i++)
                            {
                                if (Model.HostIdentityDataModel[i].IdentityType == "33".EncryptParameter())
                                {
                                    <div class="input-field-common">
                                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2">
                                            @Model.HostIdentityDataModel[i].IdentityLabel
                                        </label>
                                        @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityType)
                                        @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityValue)
                                        @Html.HiddenFor(model => Model.HostIdentityDataModel[i].IdentityLabel)
                                        @Html.TextAreaFor(model => Model.HostIdentityDataModel[i].IdentityDescription, new
                                        {
                                            @class = "w-full",
                                            @placeholder = @Model.HostIdentityDataModel[i].IdentityLabel,
                                            //@onkeypress = "return isAlphabetWithSpace(event)",
                                            autocomplete = "off",
                                            @maxLength = "500"
                                        })
                                        <span class="error">
                                            @Html.ValidationMessageFor(model => Model.HostIdentityDataModel[i].IdentityDescription)
                                        </span>
                                    </div>
                                }
                            }
                            @*@foreach (var item in Model.HostIdentityDataModel.Where(x => x.IdentityType == "33").ToList())
                                {
                                    <div class="input-field-common">
                                        <label class="block mb-[12px] text-sm font-medium text-secondary-text-2 ">
                                            @item.IdentityLabel
                                        </label>
                                        @Html.TextAreaFor(model => item.IdentityDescription, new
                                        {
                                            @class = "w-full",
                                            @placeholder = @item.IdentityLabel,
                                            @onkeypress = "return isNumber(event)",
                                            autocomplete = "off",
                                            @maxLength = "3"
                                        })
                                        <span class="error">
                                            @Html.ValidationMessageFor(m => item.IdentityDescription)
                                        </span>
                                    </div>
                                }*@
                        </div>
                    </div>
                    <div class="flex justify-between ">
                        <div>
                            <button class="btn btn-primary-normal leading-[12px] rounded-[4px] px-3 text-sm"
                                    id="previousBtn">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Previous
                            </button>
                        </div>
                        <div class="flex gap-6">
                            <button class="resetForm btn btn-primary-normal rounded-[4px] px-8 text-sm"
                                    data-drawer-hide="add-new-host-club" onclick="CancelFunction();">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Cancel
                            </button>
                            <button class="btn btn-primary-default rounded-[4px] px-8 text-sm leading-[10px]"
                                    id="nextBtn">
                                @CRS.ADMIN.APPLICATION.Resources.Resource.Next
                            </button>
                        </div>
                    </div>
                    <div class="flex justify-end py-4">
                        <div class="flex gap-6">
                            <a>
                                <button class="resetForm btn btn-primary-default h-[40px] px-8 rounded-[4px]  text-sm leading-[10px]" id="submit-button-id">
                                    @CRS.ADMIN.APPLICATION.Resources.Resource.Submit
                                </button>
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>